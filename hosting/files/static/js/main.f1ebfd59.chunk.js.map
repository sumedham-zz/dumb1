{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["ContentFilter","app","Realm","id","FeedGroup","feedArr","console","log","itemList","map","item","require","hostname","URL","feedUrl","host","ListGroup","Item","target","action","href","feedText","findDocs","topic","setRealmPosts","user","a","mongo","mongoClient","mongoCollection","db","collection","currDate","Date","dateLastWeek","getTime","queryFilterDate","alertDate","$gte","alertSource","options","find","docs","arr","forEach","element","obj","alertText","alertUrl","push","TopicDropdown","Dropdown","Toggle","variant","Menu","onClick","e","MONGODBREALM","FIREBASE","APPSYNC","COUCHBASE","AWSAMPLIFY","App","currentUser","React","setUser","realmPosts","dirtyFlag","setDirtyFlag","undefined","logIn","anonymous","loginAnonymous","DEFAULT","className","role","aria-label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1ebfd59.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./App.css\";\nimport {Dropdown, DropdownButton, ListGroup, ListGroupItem, ListGroupItemProps, ListGroupProps} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Import the MongoDB Realm Web SDK\nimport * as Realm from \"realm-web\";\n\nconst REALM_APP_ID = \"graphqldemo-qjgfx\"; // e.g. myapp-abcde\nconst app = new Realm.App({ id: REALM_APP_ID });\n\ntype FeedItem = {\n  feedText: string;\n  feedUrl: string;\n}\n\nenum ContentFilter {\n  MONGODBREALM = \"mongodb realm\",\n  APPSYNC = \"appsync\",\n  COUCHBASE = \"couchbase mobile\",\n  FIREBASE = \"firebase\",\n  AWSAMPLIFY = \"aws amplify\",\n  DEFAULT = \"mongodb realm\"\n}\n\n// Create a component that displays the given user's details\nconst FeedGroup: React.FC<{ feedArr: FeedItem[]}> = ({feedArr}) => {\n  console.log(feedArr[0])\n  const itemList = feedArr.map(item => {\n    var url = require('url');\n    var hostname = new URL(item.feedUrl).host\n    return (<ListGroup.Item target=\"_blank\" action href={item.feedUrl}><span id=\"Bold\">{hostname} - </span>{item.feedText}</ListGroup.Item>)\n  });\n  return (\n    <ListGroup>\n      {itemList}\n  </ListGroup>\n  );\n}\nconst findDocs = async (topic:String, setRealmPosts:(posts: FeedItem[]) => void, user:Realm.User) => {\n  const mongo = user?.mongoClient(\"mongodb-atlas\");\n  const mongoCollection = mongo.db(\"realmfeed\").collection(\"posts\");\n  const currDate = new Date();\n  const dateLastWeek = new Date(currDate.getTime() - 7 * 24 * 60 * 60 * 1000);\n  \n  const queryFilterDate = { alertDate: {$gte: dateLastWeek}, alertSource: topic};\n  const options = {\n    \"sort\": { \"alertDate\": -1 },\n  };\n  //  const queryFilter = {alertSource: topic}\n\n  const docs  = await mongoCollection.find(queryFilterDate, options); \n  var arr: FeedItem[] = [];\n  console.log(docs)\n  docs.forEach(element => {\n    const obj: FeedItem = {'feedText': element.alertText, 'feedUrl': element.alertUrl}\n    arr.push(obj)\n  });\n  setRealmPosts(arr)\n};\n\n// Create a component that displays the given user's details\n\nconst TopicDropdown: React.FC<{ setRealmPosts: (posts: FeedItem[]) => void, user: Realm.User }> = ({ setRealmPosts, user }) => {\n  return (\n    <Dropdown>\n  <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n      Choose Feed\n  </Dropdown.Toggle>\n  <Dropdown.Menu>\n    <Dropdown.Item onClick={e => findDocs(ContentFilter.MONGODBREALM, setRealmPosts, user)}> Mongodb Realm</Dropdown.Item>\n    <Dropdown.Item onClick={e => findDocs(ContentFilter.FIREBASE, setRealmPosts, user)}>Firebase</Dropdown.Item>\n    <Dropdown.Item onClick={e => findDocs(ContentFilter.APPSYNC, setRealmPosts, user)}>AWS AppSync</Dropdown.Item>\n    <Dropdown.Item onClick={e => findDocs(ContentFilter.COUCHBASE, setRealmPosts, user)}>Couchbase</Dropdown.Item>\n    <Dropdown.Item onClick={e => findDocs(ContentFilter.AWSAMPLIFY, setRealmPosts, user)}>AWS Amplify</Dropdown.Item>\n  </Dropdown.Menu>\n</Dropdown>\n    );\n}\n\nconst App: React.FC = () => {\n  // Keep the logged in Realm user in local state. This lets the app re-render\n  // whenever the current user changes (e.g. logs in or logs out).\n  const currentUser = app?.currentUser as Realm.User | undefined;\n  const [user, setUser] = React.useState<Realm.User | undefined>(currentUser);\n  const [realmPosts, setRealmPosts] = React.useState<FeedItem[]>([]);\n  const [dirtyFlag, setDirtyFlag] = React.useState<Boolean>(true);\n\n  if (app?.currentUser == undefined) {\n    const loginAnonymous = async () => {\n      const user: Realm.User = await app.logIn(Realm.Credentials.anonymous());\n      setUser(user);\n    };\n    loginAnonymous()\n  }\n  if (dirtyFlag && user) {\n    findDocs(ContentFilter.DEFAULT, setRealmPosts, user); \n    setDirtyFlag(false);\n  }\n  // TODO: default to Realm\n\n  // If a user is logged in, show their details. Otherwise, show the login screen.\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <div>Landscaping <span role=\"img\" aria-label=\"sheep\">üçÉ</span> </div>\n        <div>Default: MongoDB Realm </div>\n        <div className=\"Dropdown\">\n          {user ? <TopicDropdown setRealmPosts={setRealmPosts} user = {user} /> : <div> Loading ... </div>}\n        </div>\n        <div className=\"Feed\">\n          <FeedGroup feedArr={(realmPosts)}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}